import axios from "axios";
import dotenv from "dotenv";
import { notifyAdmin } from "./notifications.js";
import { syncToSuvvi } from "./suvviApi.js";

dotenv.config();

const alfa = axios.create({
  baseURL: process.env.ALFA_API_URL,
  headers: { Authorization: `Bearer ${process.env.ALFA_API_KEY}` },
});

// –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
export async function findOrCreateClient(data) {
  try {
    const { phone, name, email } = data;
    const search = await alfa.get(`/students?phone=${phone}`);
    
    if (search.data.length) {
      console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: ${name} (${phone})`);
      return search.data[0];
    }

    const res = await alfa.post("/students", {
      name,
      phone,
      email,
      source: "Suvvi",
      status: "new",
    });
    
    console.log(`‚ú® –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${name}`);
    await notifyAdmin(`–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: ${name}, ${phone}`);
    
    return res.data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:", error.message);
    throw error;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≥—Ä—É–ø–ø –ø–æ –∫—É—Ä—Å—É
export async function getOpenGroups(courseId) {
  try {
    const res = await alfa.get(`/groups?course=${courseId}&status=open`);
    return res.data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø:", error.message);
    return [];
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≥—Ä—É–ø–ø (–¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π)
export async function getAllOpenGroups() {
  try {
    const res = await alfa.get(`/groups?status=open`);
    return res.data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø:", error.message);
    return [];
  }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
export async function addToGroup(groupId, studentId) {
  try {
    const res = await alfa.post(`/groups/${groupId}/members`, {
      student_id: studentId,
    });
    console.log(`‚úÖ –°—Ç—É–¥–µ–Ω—Ç ${studentId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É ${groupId}`);
    return res.data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É:", error.message);
    throw error;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
export async function createGroup(courseId) {
  try {
    const res = await alfa.post(`/groups`, {
      course_id: courseId,
      status: "open",
      max_members: 8,
    });
    console.log(`‚ú® –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ ${res.data.id} –¥–ª—è –∫—É—Ä—Å–∞ ${courseId}`);
    await notifyAdmin(`–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –∫—É—Ä—Å–∞ ${courseId}`);
    return res.data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã:", error.message);
    throw error;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
export async function updateStudentStatus(studentId, status) {
  try {
    const res = await alfa.patch(`/students/${studentId}`, { status });
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ ${studentId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${status}`);
    return res.data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", error.message);
    throw error;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
export async function updatePayment(studentId, amount, paid = true) {
  try {
    const res = await alfa.post(`/students/${studentId}/payments`, {
      amount,
      paid,
      date: new Date().toISOString(),
    });
    console.log(`‚úÖ –û–ø–ª–∞—Ç–∞ ${amount} –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ${studentId} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞`);
    return res.data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã:", error.message);
    throw error;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
export async function getStudent(studentId) {
  try {
    const res = await alfa.get(`/students/${studentId}`);
    return res.data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞:", error.message);
    return null;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Alfa CRM
export async function handleAlfaWebhook(req, res) {
  try {
    const { event, data } = req.body;
    console.log(`üì© Webhook –æ—Ç Alfa CRM: ${event}`);

    switch (event) {
      case "student.status_changed":
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ Suvvi
        await syncToSuvvi({
          student_id: data.student_id,
          status: data.new_status,
          suvvi_id: data.suvvi_id,
        });
        break;

      case "payment.created":
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ–ø–ª–∞—Ç–µ
        await syncToSuvvi({
          student_id: data.student_id,
          payment: data.amount,
          suvvi_id: data.suvvi_id,
        });
        break;

      case "group.full":
        // –ì—Ä—É–ø–ø–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
        await createGroup(data.course_id);
        break;

      case "lesson.completed":
        // –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞
        await requestFeedback(data);
        break;

      default:
        console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${event}`);
    }

    res.status(200).json({ success: true });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Alfa webhook:", error.message);
    res.status(500).json({ error: error.message });
  }
}

// –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
async function requestFeedback(data) {
  try {
    const { group_id, lesson_id, students } = data;
    
    for (const student of students) {
      if (student.suvvi_id) {
        await syncToSuvvi({
          suvvi_id: student.suvvi_id,
          type: "feedback_request",
          lesson_id,
          group_id,
        });
      }
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:", error.message);
  }
}
