import axios from "axios";
import dotenv from "dotenv";
import {
  findOrCreateClient,
  updateStudentStatus,
  updatePayment,
} from "./alfaApi.js";
import { assignToGroup } from "./groupManager.js";

dotenv.config();

const suvvi = axios.create({
  baseURL: process.env.SUVVI_API_URL,
  headers: { Authorization: `Bearer ${process.env.SUVVI_TOKEN}` },
});

export async function handleSuvviWebhook(req, res) {
  try {
    const { event, data } = req.body;
    console.log(`üì© Webhook –æ—Ç Suvvi: ${event}`);

    switch (event) {
      case "new_lead":
        await handleNewLead(data);
        break;

      case "payment_confirmed":
        await handlePayment(data);
        break;

      case "feedback_received":
        await handleFeedback(data);
        break;

      case "cancellation":
        await handleCancellation(data);
        break;

      default:
        console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${event}`);
    }

    res.status(200).json({ success: true });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Suvvi webhook:", error.message);
    res.status(500).json({ error: error.message });
  }
}

async function handleNewLead(data) {
  try {
    const client = await findOrCreateClient({
      phone: data.phone,
      name: data.name,
      email: data.email,
    });

    const group = await assignToGroup(client.id, data.course_id);
    await updateStudentStatus(client.id, "registered");

    await sendMessage(data.lead_id, {
      text: `‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –≥—Ä—É–ø–ø—É ‚Ññ${group.id}!\n\nüìÖ –ó–∞–Ω—è—Ç–∏—è –Ω–∞—á–Ω—É—Ç—Å—è ${group.start_date}\n‚è∞ –í—Ä–µ–º—è: ${group.schedule}\nüë• –ú–µ—Å—Ç –≤ –≥—Ä—É–ø–ø–µ: ${group.members_count}/8`,
    });

    console.log(`‚úÖ –ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: ${data.name} ‚Üí –≥—Ä—É–ø–ø–∞ ${group.id}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:", error.message);
    await sendMessage(data.lead_id, {
      text: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
    });
  }
}

async function handlePayment(data) {
  try {
    const { student_id, amount, suvvi_id } = data;

    await updatePayment(student_id, amount, true);
    await updateStudentStatus(student_id, "paid");

    await sendMessage(suvvi_id, {
      text: `‚úÖ –û–ø–ª–∞—Ç–∞ ${amount} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—â–∞—Ç—å –∑–∞–Ω—è—Ç–∏—è. –î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã`,
    });

    console.log(`‚úÖ –û–ø–ª–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: —Å—Ç—É–¥–µ–Ω—Ç ${student_id}, —Å—É–º–º–∞ ${amount}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã:", error.message);
  }
}

async function handleFeedback(data) {
  try {
    const { student_id, lesson_id, rating, comment, suvvi_id } = data;

    await axios.post(`${process.env.ALFA_API_URL}/feedback`, {
      student_id,
      lesson_id,
      rating,
      comment,
    });

    await sendMessage(suvvi_id, {
      text: "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å. üíô",
    });

    console.log(`‚úÖ –û—Ç–∑—ã–≤ –ø–æ–ª—É—á–µ–Ω –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ ${student_id}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞:", error.message);
  }
}

async function handleCancellation(data) {
  try {
    const { student_id, reason, suvvi_id } = data;

    await updateStudentStatus(student_id, "cancelled");

    await sendMessage(suvvi_id, {
      text: "–ñ–∞–ª—å, —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å. –ù–∞–¥–µ–µ–º—Å—è —É–≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! üëã",
    });

    console.log(`‚úÖ –û—Ç–º–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ${student_id}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã:", error.message);
  }
}

export async function syncToSuvvi(data) {
  try {
    const { suvvi_id, status, payment, type, lesson_id } = data;

    if (!suvvi_id) {
      console.warn("‚ö†Ô∏è –ù–µ—Ç suvvi_id –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏");
      return;
    }

    if (status) {
      const messages = {
        registered: "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫—É—Ä—Å!",
        paid: "üí∞ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!",
        completed: "üéì –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∫—É—Ä—Å–∞!",
        cancelled: "‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.",
      };

      await sendMessage(suvvi_id, { text: messages[status] || "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω" });
    }

    if (payment) {
      await sendMessage(suvvi_id, {
        text: `üí∞ –ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞: ${payment} —Å—É–º.\n\n–°–ø–∞—Å–∏–±–æ!`,
      });
    }

    if (type === "feedback_request") {
      await sendMessage(suvvi_id, {
        text: "–ó–∞–Ω—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! üéâ\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–∫ –æ—Ç 1 –¥–æ 5 –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.",
        buttons: [
          { text: "‚≠ê 1", callback_data: `rate_1_${lesson_id}` },
          { text: "‚≠ê‚≠ê 2", callback_data: `rate_2_${lesson_id}` },
          { text: "‚≠ê‚≠ê‚≠ê 3", callback_data: `rate_3_${lesson_id}` },
          { text: "‚≠ê‚≠ê‚≠ê‚≠ê 4", callback_data: `rate_4_${lesson_id}` },
          { text: "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê 5", callback_data: `rate_5_${lesson_id}` },
        ],
      });
    }

    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ Suvvi –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è ${suvvi_id}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ Suvvi:", error.message);
  }
}

export async function sendMessage(recipientId, message) {
  try {
    await suvvi.post("/messages", {
      recipient_id: recipientId,
      type: message.buttons ? "interactive" : "text",
      ...message,
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error.message);
    throw error;
  }
}
